Memcheck

Memcheck detects memory-management problems, and is aimed primarily at C and C++ programs. When a program is run under Memcheck's supervision, all reads and writes of memory are checked, and calls to malloc/new/free/delete are intercepted. As a result, Memcheck can detect if your program:

    Accesses memory it shouldn't (areas not yet allocated, areas that have been freed, areas past the end of heap blocks, inaccessible areas of the stack).
    Uses uninitialised values in dangerous ways.
    Leaks memory.
    Does bad frees of heap blocks (double frees, mismatched frees).
    Passes overlapping source and destination memory blocks to memcpy() and related functions.

Memcheck reports these errors as soon as they occur, giving the source line number at which it occurred, and also a stack trace of the functions called to reach that line. Memcheck tracks addressability at the byte-level, and initialisation of values at the bit-level. As a result, it can detect the use of single uninitialised bits, and does not report spurious errors on bitfield operations. Memcheck runs programs about 10--30x slower than normal.


Cachegrind

Cachegrind is a cache profiler. It performs detailed simulation of the I1, D1 and L2 caches in your CPU and so can accurately pinpoint the sources of cache misses in your code. It identifies the number of cache misses, memory references and instructions executed for each line of source code, with per-function, per-module and whole-program summaries. It is useful with programs written in any language. Cachegrind runs programs about 20--100x slower than normal.


Callgrind
Callgrind, by Josef Weidendorfer, is an extension to Cachegrind. It provides all the information that Cachegrind does, plus extra information about callgraphs. It was folded into the main Valgrind distribution in version 3.2.0. Available separately is an amazing visualisation tool, KCachegrind, which gives a much better overview of the data that Callgrind collects; it can also be used to visualise Cachegrind's output.


Massif

Massif is a heap profiler. It performs detailed heap profiling by taking regular snapshots of a program's heap. It produces a graph showing heap usage over time, including information about which parts of the program are responsible for the most memory allocations. The graph is supplemented by a text or HTML file that includes more information for determining where the most memory is being allocated. Massif runs programs about 20x slower than normal.


Helgrind

Helgrind is a thread debugger which finds data races in multithreaded programs. It looks for memory locations which are accessed by more than one (POSIX p-)thread, but for which no consistently used (pthread_mutex_) lock can be found. Such locations are indicative of missing synchronisation between threads, and could cause hard-to-find timing-dependent problems. It is useful for any program that uses pthreads. It is a somewhat experimental tool, so your feedback is especially welcome here.


DRD

DRD is a tool for detecting errors in multithreaded C and C++ programs. The tool works for any program that uses the POSIX threading primitives or that uses threading concepts built on top of the POSIX threading primitives. While Helgrind can detect locking order violations, for most programs DRD needs less memory to perform its analysis. 


suppression
 --gen-suppressions=<yes|no|all> [default: no]
              当设置为yes时，Valgrind将会在每个错误显示之后自动暂停并且打印下
              面这一行：
                  ---- Print suppression ? --- [Return/N/n/Y/y/C/c] ----


              这个提示的行为和--db-attach选项(见下面)相同。

              如果选择是，Valgrind会打印出一个错误的禁止条目，你可以把它剪切然后
              粘帖到一个文件，如果不希望在将来再看到这个错误信息。

              当设置为all时，Valgrind会对每一个错误打印一条禁止条目，而不向用户
              询问。

              这个选项对C++程序非常有用，它打印出编译器调整过的名字。

              注意打印出来的禁止条目是尽可能的特定的。如果需要把类似的条目归纳
              起来，比如在函数名中添加通配符。并且，有些时候两个不同的错误也会
              产生同样的禁止条目，这时Valgrind就会输出禁止条目不止一次，但是在
              禁止条目的文件中只需要一份拷贝(但是如果多于一份也不会引起什么问
              题)。并且，禁止条目的名字像<在这儿输入一个禁止条目的名字>;名字并
              不是很重要，它只是和-v选项一起使用打印出所有使用的禁止条目记录。

Suppression file syntax
This is described in [1] and [2]. Each suppression is surrounded with curly-braces, and starts with the line: <insert_a_suppression_name_here>. You can replace this with an informative name if you wish, but it's not necessary.

The second line will start with Memcheck:. Immediately following will be the type of error. See the links for all the possibilities, but I found mostly Cond, Addr8, Value8, and Leak. Unfortunately most false positives seem to produce most or all of these error types, and there's no way of combining the types in a single suppression; so each error needs 3 or 4 otherwise-identical suppressions.

The remaining lines start either with fun: for function calls, or obj: for the names of shared objects. Examples are fun:gdk_set_locale and obj:/usr/lib/libgdk-x11-2.0.so.0.2000.1.

Wildcards
The standard wildcard characters * and ? can be used e.g. obj:/usr/lib/libgdk-x11-* would be more generally applicable than the above line. However I found the frame-level wildcard '...' to be much more useful. This matches zero or more fun: or obj: lines. Using it results in a short, simple suppression that catches multiple similar errors.

So ideally a long suppression would end up as:
{
   <gdk_set_locale>
   Memcheck:Cond
   ...
   fun:gdk_set_locale
}
or
 {
   <libpango>
   Memcheck:Leak
   ...
   obj:/usr/*lib*/libpango*
}
As my programming errors are unlikely to involve calling libpango or similar, this should be both efficient and safe.

官方文档：
4.4. Writing suppression files

The basic suppression format is described in Suppressing errors.

The suppression-type (second) line should have the form:

Memcheck:suppression_type
The Memcheck suppression types are as follows:

Value1, Value2, Value4, Value8, Value16, meaning an uninitialised-value error when using a value of 1, 2, 4, 8 or 16 bytes.

Cond (or its old name, Value0), meaning use of an uninitialised CPU condition code.

Addr1, Addr2, Addr4, Addr8, Addr16, meaning an invalid address during a memory access of 1, 2, 4, 8 or 16 bytes respectively.

Jump, meaning an jump to an unaddressable location error.

Param, meaning an invalid system call parameter error.

Free, meaning an invalid or mismatching free.

Overlap, meaning a src / dst overlap in memcpy or a similar function.

Leak, meaning a memory leak.

Param errors have a mandatory extra information line at this point, which is the name of the offending system call parameter.

Leak errors have an optional extra information line, with the following format:

match-leak-kinds:<set>
where <set> specifies which leak kinds are matched by this suppression entry. <set> is specified in the same way as with the option --show-leak-kinds, that is, one of the following:

a comma separated list of one or more of definite indirect possible reachable.
all to specify the complete set (all leak kinds).
none for the empty set.
If this optional extra line is not present, the suppression entry will match all leak kinds.

Be aware that leak suppressions that are created using --gen-suppressions will contain this optional extra line, and therefore may match fewer leaks than you expect. You may want to remove the line before using the generated suppressions.

The other Memcheck error kinds do not have extra lines.

If you give the -v option, Valgrind will print the list of used suppressions at the end of execution. For a leak suppression, this output gives the number of different loss records that match the suppression, and the number of bytes and blocks suppressed by the suppression. If the run contains multiple leak checks, the number of bytes and blocks are reset to zero before each new leak check. Note that the number of different loss records is not reset to zero.

In the example below, in the last leak search, 7 blocks and 96 bytes have been suppressed by a suppression with the name some_leak_suppression:

--21041-- used_suppression:     10 some_other_leak_suppression s.supp:14 suppressed: 12,400 bytes in 1 blocks
--21041-- used_suppression:     39 some_leak_suppression s.supp:2 suppressed: 96 bytes in 7 blocks
For ValueN and AddrN errors, the first line of the calling context is either the name of the function in which the error occurred, or, failing that, the full path of the .so file or executable containing the error location. For Free errors, the first line is the name of the function doing the freeing (eg, free, __builtin_vec_delete, etc). For Overlap errors, the first line is the name of the function with the overlapping arguments (eg. memcpy, strcpy, etc).

The last part of any suppression specifies the rest of the calling context that needs to be matched.