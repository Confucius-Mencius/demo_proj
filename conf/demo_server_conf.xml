<?xml version="1.0" encoding="UTF-8"?>

<!--
XML中的特殊符号只有5种，<、>、&、’和”。
这5种特殊号对应的字符如下：
<       &lt;
>       &gt;
&       &amp;
'       &apos;
"       &quot;
-->

<conf>
    <gperftools>
        <!-- =1：开启cpu剖析，=0不开启cpu剖析。不配置则默认为0 -->
        <enable_cpu_profiling>0</enable_cpu_profiling>
        <!-- =1：开启内存剖析，=0不开启内存剖析。不配置则默认为0 -->
        <enable_heap_profiling>0</enable_heap_profiling>
        <!-- 是否立即清理空闲内存池，=1：清理，=0：不清理。不配置则默认为0 -->
        <release_free_mem>0</release_free_mem>
    </gperftools>

    <!-- 全局的公共逻辑so，供所有线程访问的逻辑，其中的代码通常需要加锁。没有则不配置 -->
    <global_logic_so>./libglobal_logic.so</global_logic_so>

    <work>
         <!-- work线程数，>=0。建议为IO线程数的2倍 -->
        <thread_count>4</thread_count>

        <!-- 一个work线程内所有的work_logic_so共享的逻辑，其中的代码一般不需要加锁。没有则不配置 -->
        <common_logic_so>./libwork_common_logic.so</common_logic_so>

        <!-- work_logic_so_group，可配置多个work_logic_so，没有则不配置 -->
        <logic_so_group>
            <logic_so>./libwork_logic.so</logic_so>
        </logic_so_group>
    </work>

    <burden>
        <!-- burden线程数，>=0。必须在有work线程和work_logic_so的情况下才配置burden线程及burden_logic_so，没有则不配置。建议为IO线程数的2倍 -->
        <thread_count>4</thread_count>

        <!-- 一个burden线程内所有的burden_logic_so共享的逻辑，其中的代码一般不需要加锁。没有则不配置 -->
        <common_logic_so>./libburden_common_logic.so</common_logic_so>

        <!-- burden_logic_so_group，可配置多个burden_logic_so，没有则不配置 -->
        <logic_so_group>
            <logic_so>./libburden_logic.so</logic_so>
        </logic_so_group>
    </burden>

    <tcp>
        <!-- 限制单个线程可以接纳的最大连接数，即同时在线数，不配置或配置为0表示无限制，依据系统处理能力 -->
        <conn_count_limit>0</conn_count_limit>

        <inactive_conn>
            <!-- 定时检查不再活跃的客户端连接并关闭，不配置或配置为0则不启动该定时器 -->
            <check_interval>
                <sec>60</sec>
                <usec>0</usec>
            </check_interval>

            <!-- 从上次接收消息算起，持续多久未接收新的消息，即认为该连接不再活跃。单位：秒 -->
            <life>1800</life>
        </inactive_conn>

        <!-- 在一定时间内（单位：秒）收到的消息条数如果超过指定值，则认为是网络风暴，服务器会断开连接 -->
        <storm_interval>10</storm_interval>
        <storm_threshold>1000</storm_threshold>

        <!-- raw tcp，字节流内容需要在logic中自己解析 TODO 改为stream -->
        <raw>
            <!-- 是否使用bufferevent实现，否则就使用event实现 -->
            <use_bufferevent>1</use_bufferevent>

            <!-- tcp监听地址和端口，ip:port或者host:port格式 -->
            <addr>0.0.0.0</addr>
            <port>5555</port>

            <!-- tcp io线程数，>=1。建议等于CPU核心数 -->
            <thread_count>2</thread_count>

            <!-- 一个tcp线程内所有的logic so共享的逻辑，其中的代码一般不需要加锁。没有则不配置 -->
            <common_logic_so>./libtcp_common_logic.so</common_logic_so>

            <!-- tcp logic so group，可配置多个logic so，没有则不配置，但此时必须配置work_logic_so，用于处理任务 -->
            <logic_so_group>
                <logic_so>./libtcp_logic.so</logic_so>
            </logic_so_group>
        </raw>

        <!-- 框架自定义协议的tcp -->
        <proto>
            <!-- 是否使用bufferevent实现，否则就使用event实现 -->
            <use_bufferevent>1</use_bufferevent>

            <!-- =1：对消息做checksum校验，=0：不做。不配置则默认为1 -->
            <do_checksum>0</do_checksum>

            <!-- 消息体的最大长度，单位：字节。不配置则使用默认值1048576（1M） -->
            <max_msg_body_len>1048576</max_msg_body_len>

            <part_msg>
                <!-- 定时检查不完整消息间隔，单位：秒。配置为0或者不配置则使用默认值：5秒 -->
                <check_interval>5</check_interval>

                <!-- 从上次接收到部分消息算起，持续多久未接收到一个完整的消息，即认为该连接非法。单位：秒。配置为0或者不配置则使用默认值：60秒 -->
                <conn_life>60</conn_life>
            </part_msg>

            <!-- tcp监听地址和端口，ip:port或者host:port格式 -->
            <addr>0.0.0.0</addr>
            <port>6666</port>

            <!-- tcp io线程数，>=1。建议等于CPU核心数 -->
            <thread_count>2</thread_count>

            <!-- 一个tcp线程内所有的logic so共享的逻辑，其中的代码一般不需要加锁。没有则不配置 -->
            <common_logic_so>./libproto_tcp_common_logic.so</common_logic_so>

            <!-- tcp logic so group，可配置多个logic so，没有则不配置，但此时必须配置work_logic_so，用于处理任务 -->
            <logic_so_group>
                <logic_so>./libproto_tcp_logic.so</logic_so>
            </logic_so_group>
        </proto>

        <!-- http和websocket -->
        <http_ws>
            <!-- 是否使用bufferevent实现，否则就使用event实现 -->
            <use_bufferevent>1</use_bufferevent>

            <part_msg>
                <!-- 定时检查不完整消息间隔，单位：秒。配置为0或者不配置则使用默认值：5秒 -->
                <check_interval>5</check_interval>

                <!-- 从上次接收到部分消息算起，持续多久未接收到一个完整的消息，即认为该连接非法。单位：秒。配置为0或者不配置则使用默认值：60秒 -->
                <conn_life>60</conn_life>
            </part_msg>

            <!-- tcp监听地址和端口，ip:port或者host:port格式 -->
            <addr>0.0.0.0</addr>
            <port>10080</port>

            <!-- TODO -->
            <security>
                <port>10443</port>

                <!-- https-wss秘钥文件 -->
                <certificate_chain_file_path>../conf/xxx_com.crt</certificate_chain_file_path>
                <private_key_file_path>../conf/xxx_com.key</private_key_file_path>
            </security>

            <!-- tcp io线程数，>=1。建议等于CPU核心数 -->
            <thread_count>2</thread_count>

            <!-- 一个http-ws线程内所有的logic so共享的逻辑，其中的代码一般不需要加锁。没有则不配置 -->
            <common_logic_so>./libhttp_ws_common_logic.so</common_logic_so>

            <!-- http-ws logic so group，可配置多个logic so，没有则不配置，但此时必须配置work_logic_so，用于处理任务 -->
            <logic_so_group>
                <logic_so>./libhttp_ws_logic.so</logic_so>
            </logic_so_group>
        </http_ws>
    </tcp>

    <!-- udp数据报 -->
    <udp>
        <recv_buffer_size>16384</recv_buffer_size>

        <inactive_conn>
            <!-- 定时检查不再活跃的客户端连接并关闭，不配置或配置为0则不启动该定时器 -->
            <check_interval>
                <sec>60</sec>
                <usec>0</usec>
            </check_interval>

            <!-- 从上次接收消息算起，持续多久未接收新的消息，即认为该连接不再活跃。单位：秒 -->
            <life>1800</life>
        </inactive_conn>

        <!-- udp监听地址和端口，ip:port或者host:port格式 -->
        <addr>0.0.0.0</addr>
        <port>7777</port>

        <!-- udp io线程数，>=1。建议等于CPU核心数 -->
        <thread_count>2</thread_count>

        <!-- 一个udp线程内所有的logic so共享的逻辑，其中的代码一般不需要加锁。没有则不配置 -->
        <common_logic_so>./libudp_common_logic.so</common_logic_so>

        <!-- udp logic so group，可配置多个logic so，没有则不配置，但此时必须配置work_logic_so，用于处理任务 -->
        <logic_so_group>
            <logic_so>./libudp_logic.so</logic_so>
        </logic_so_group>
    </udp>

    <peer>
        <!-- 定时检查超时未回复的消息间隔，单位：秒。配置为0或者不配置则使用默认值：1秒 -->
        <rsp_check_interval>1</rsp_check_interval>

        <tcp>
            <proto>
                <!-- 定时重连间隔。配置为0表示不做定时重连，不配置则使用默认值：1秒 -->
                <conn_interval>
                    <sec>1</sec>
                    <usec>0</usec>
                </conn_interval>
            </proto>
        </tcp>

        <http>
            <!-- 测试发现，不配置conn_timeout和conn_max_retry的情况下，通过libevent发送http请求给对端，如果可以连接到对端，但是没有起服务，则1秒就会超时；如果对端不存在，根本连接不上，30秒会超时。libevent默认50秒超时 -->
            <!-- 多久没有消息传递则关闭连接，单位：秒。不配置或配置为0则使用系统默认值(见上面的注释) -->
            <conn_timeout>60</conn_timeout>
            
            <!-- 该连接上请求的最大重试次数。不配置或配置为0则使用系统默认值(0)，-1表示无限重试。重试初始间隔为1s，后一次为前一次的2倍。 -->
            <conn_max_retry>0</conn_max_retry>
        </http>
    </peer>

    <!-- 应用相关的配置 -->
    <app>
        <!-- 测试模式，线上环境必须改为0 -->
        <test_mode>0</test_mode>

        <mongodb>
            <db_conn_str>127.0.0.1</db_conn_str>
            <!-- <db_conn_str>admin:admin@192.168.6.132:7000,192.168.6.132:7001,192.168.6.132:7002/?replicaSet=yunpanrs</db_conn_str> -->
        </mongodb>

        <zk>        
             <!-- zookeeper集群地址 -->
            <host>10.0.5.7:2181,10.0.5.7:2182,10.0.5.7:2183</host>

            <!-- zookeeper连接超时时间，单位：秒 -->
            <timeout>30</timeout>

            <!-- zookeeper日志级别 ZOO_LOG_LEVEL_ERROR=1,ZOO_LOG_LEVEL_WARN=2,ZOO_LOG_LEVEL_INFO=3,ZOO_LOG_LEVEL_DEBUG=4 -->
            <log_level>3</log_level>

            <!-- zookeeper日志文件路径 -->
            <log_file_path>../logs/zk.log</log_file_path>

            <!-- zookeeper用户名密码 -->
            <user_pass>quantum:quantum</user_pass>
        </zk>
    </app>
</conf>
