// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_msg_id.proto

#include "ss_msg_id.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace com {
namespace moon {
namespace demo {
namespace ss {
}  // namespace ss
}  // namespace demo
}  // namespace moon
}  // namespace com
namespace protobuf_ss_5fmsg_5fid_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ss_msg_id.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017ss_msg_id.proto\022\020com.moon.demo.ss*\216\005\n\005"
      "MsgID\022\020\n\014PLACE_HOLDER\020\000\022\025\n\020MSG_ID_DEMO2_"
      "REQ\020\320\017\022\025\n\020MSG_ID_DEMO2_RSP\020\321\017\022\025\n\020MSG_ID_"
      "DEMO3_REQ\020\322\017\022\025\n\020MSG_ID_DEMO3_RSP\020\323\017\022\025\n\020M"
      "SG_ID_DEMO4_REQ\020\324\017\022\025\n\020MSG_ID_DEMO4_RSP\020\325"
      "\017\022\025\n\020MSG_ID_DEMO5_REQ\020\326\017\022\025\n\020MSG_ID_DEMO5"
      "_RSP\020\327\017\022\025\n\020MSG_ID_DEMO6_REQ\020\330\017\022\025\n\020MSG_ID"
      "_DEMO6_RSP\020\331\017\022\025\n\020MSG_ID_DEMO7_REQ\020\332\017\022\025\n\020"
      "MSG_ID_DEMO7_RSP\020\333\017\022\025\n\020MSG_ID_DEMO8_REQ\020"
      "\334\017\022\025\n\020MSG_ID_DEMO8_RSP\020\335\017\022\025\n\020MSG_ID_DEMO"
      "9_REQ\020\336\017\022\025\n\020MSG_ID_DEMO9_RSP\020\337\017\022\026\n\021MSG_I"
      "D_DEMO10_REQ\020\340\017\022\026\n\021MSG_ID_DEMO10_RSP\020\341\017\022"
      "\026\n\021MSG_ID_DEMO20_REQ\020\342\017\022\026\n\021MSG_ID_DEMO20"
      "_RSP\020\343\017\022\026\n\021MSG_ID_DEMO50_REQ\020\344\017\022\026\n\021MSG_I"
      "D_DEMO50_RSP\020\345\017\022\026\n\021MSG_ID_DEMO90_REQ\020\346\017\022"
      "\026\n\021MSG_ID_DEMO90_RSP\020\347\017\022\025\n\020MSG_ID_DEMO2_"
      "NFY\020\350\017\022\025\n\020MSG_ID_DEMO4_NFY\020\351\017\022\025\n\020MSG_ID_"
      "DEMO5_NFY\020\352\017b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_msg_id.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ss_5fmsg_5fid_2eproto
namespace com {
namespace moon {
namespace demo {
namespace ss {
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_ss_5fmsg_5fid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ss_5fmsg_5fid_2eproto::file_level_enum_descriptors[0];
}
bool MsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ss
}  // namespace demo
}  // namespace moon
}  // namespace com
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
